/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package tictactoe.java;

import java.util.Optional;
import java.util.function.Function;

class App {
    // enum Letter {
    //     X,
    //     O
    // }

    sealed interface Letter permits X, O {}
    record X() implements Letter {}
    record O() implements Letter {}

    sealed interface Value permits Unspecified, LetterValue {}
    record Unspecified() implements Value {}
    record LetterValue(Letter letter) implements Value {}

    enum OneThroughThree {
        One,
        Two,
        Three
    }

    record Position(OneThroughThree row, OneThroughThree column) {
    }

    record Move(Position at, Value letter) {
    }

    record Row(Value value1, Value value2, Value value3) {
    }

    record Board(Row row1, Row row2, Row row3) {
    }

    static Value select(Board board, Position position) {
        Row row = switch (position.row()) {
            case One -> board.row1();
            case Two -> board.row2();
            case Three -> board.row3();
        };

        return switch (position.column()) {
            case One -> row.value1();
            case Two -> row.value2();
            case Three -> row.value3();
        };
    }

    static Board set(Value value, Board board, Position position) {
        Row row1 = board.row1(), row2 = board.row2(), row3 = board.row3();

        Row newRow = switch (position.row()) {
            case One -> updateRow(row1, value, position.column());
            case Two -> updateRow(row2, value, position.column());
            case Three -> updateRow(row3, value, position.column());
        };

        return switch (position.column()) {
            case One -> new Board(newRow, row2, row3);
            case Two -> new Board(row1, newRow, row3);
            case Three -> new Board(row1, row2, newRow);
        };
    }

    static Row updateRow(Row row, Value value, OneThroughThree column) {
        return switch (column) {
            case One -> new Row(value, row.value2(), row.value3());
            case Two -> new Row(row.value1(), value, row.value3());
            case Three -> new Row(row.value1(), row.value2(), value);
        };
    }

    static Board modify(Function<Value, Value> f, Board board, Position position) {
        return set(f.apply(select(board, position)), board, position);
    }

    // something related to partial function in fsharp which does not involves specifying board and postion
    // let placePieceIfCan piece = modify (function | Unspecified -> Letter piece | x -> x)
    static Board placePieceifCan(Value piece, Board board, Position position) {
        return modify(v -> v instanceof Unspecified ? piece : v, board, position);
    }

    static Optional<Board> makeMove(Move move, Board board) {
        return select(board, move.at()) instanceof Unspecified ?
            Optional.of(placePieceifCan(move.letter(), board, move.at()));
            : Optional.empty();
    }


    public static void main(String[] args) {

    }
}
